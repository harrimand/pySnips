
#varStr = "AAA BBB CCC DDD EEE FFF GGG"

varStr = "A B C D E" # F G"
varOut = "Expression"
impList = [1, 5, 7, 11, 13, 15, 19, 21, 25, 27, 31]
# impList = [1, 5, 7, 11, 13, 15, 19, 21, 25, 27, 31, 35, 39, 41, 45, 47, 51, 53, 57, 59, 63]

#-----------------------------------------------------------------------------------------------
#Test Code for development to double the impList size and add a constant to the 2nd half 
#  of the list.  The constant = 2**n where n = number of bits in the largest number in the list.
if (0):
    impList = impList + impList
    addamt = 2**(max(impList).bit_length())
    for r, n in enumerate(impList[int(len(impList)/2):]):
        impList[r + int(len(impList)/2)] = n + addamt
#-----------------------------------------------------------------------------------------------

def ttRow(rowNum, bits, colW, out, outW):
    """Parameters:  Row Number, bit width, column Width, output value, output Width
    Convert rowNum to binary and space bits according to column width.
    Append out bit spaced according to outW.  Include "|" characters for table borders."""
    bstr = bin(rowNum)[2:].zfill(bits)
    row = str(rowNum).rjust(10) + "| "
    for b in bstr:
        row += (b.center(colW, "_"))
    row += "|" + out.center(outW)
    return row


table = []
table.append("Input Variables: " + varStr)
table.append("Output: " + varOut)
table.append("Implicants: " + str(impList) + "\n\n")


bitsize = max(impList).bit_length()
varList = varStr.split()

colWidth = max([3] + [max([len(n)+2 for n in varList])])

print(" ".rjust(11), end = " ")
ttLine = " ".rjust(12)

for c in varList:
    print(c.center(colWidth),end = "")
    ttLine += c.center(colWidth)
print(" " + varOut)
ttLine += " " + varOut
table.append(ttLine)

print(" ".rjust(10), "_" * (colWidth * len(varList)+2 + max(3, len(varOut))))
ttLine = " ".rjust(10) + "_" * (colWidth * len(varList)+2 + max(3, len(varOut)))
table.append(ttLine)

print("|".rjust(11), " " * (colWidth * len(varList)-1), "|")
ttLine = "|".rjust(11) + " " * (colWidth * len(varList)+1) + "|"
table.append(ttLine)

for n in range(2 ** bitsize):
    print(ttRow(n, bitsize, colWidth, "1" if n in impList else "0", max(3,len(varOut))))
    table.append(ttRow(n, bitsize, colWidth, "1" if n in impList else "0", max(3,len(varOut))))


#for t in table: print(t)

ttfile = open("tt.txt", "w")
print()
#ttfile.write("\nTruth Table Generated by tt.py\n\n")
#for t in table: ttfile.write(t + "\n")


for r in table[:3]: ttfile.write(r + "\n")

if bitsize > 5:
   ttfile.write(table[3] + table[3] + "\n")
   ttfile.write(table[4] + " " + table[4] + "\n")
   ttfile.write(table[5] + " "*10 + table[5] + "\n")

for r, data in enumerate(table[6:6 + 2**(bitsize - 1)]):
    ttfile.write(data + table[r + 6 + 2**(bitsize - 1)] + "\n")

ttfile.close()


